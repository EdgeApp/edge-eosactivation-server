/invoiceNotificationEvent:body { id: 'PP3pqtPsPW7bYdPQ3XceHG',
  url: null,
  posData: null,
  status: 'expired',
  btcPrice: null,
  price: 27.088686993990365,
  currency: 'USD',
  invoiceTime: 1583035455000,
  expirationTime: 1583046255000,
  currentTime: 1583046255118,
  btcPaid: null,
  btcDue: null,
  rate: 0,
  exceptionStatus: false,
  buyerFields: null,
  transactionCurrency: null,
  paymentSubtotals: { LTC: 60560445 },
  paymentTotals: { LTC: 60560545 },
  amountPaid: '0.00000000',
  exchangeRates: { LTC: { USD: 0 } } }
url not available on invoice object. Check configs for properties to save
btcPrice not available on invoice object. Check configs for properties to save
btcDue not available on invoice object. Check configs for properties to save
cryptoInfo not available on invoice object. Check configs for properties to save
lowFeeDetected not available on invoice object. Check configs for properties to save
refundAddressRequestPending not available on invoice object. Check configs for properties to save
token not available on invoice object. Check configs for properties to save
minerFees not available on invoice object. Check configs for properties to save
addresses not available on invoice object. Check configs for properties to save
A BTCPay notification event for an unknown/unhandled Event has been received, and should probably not have been. { errorCode: 'UnhandledNotificationEventWarning',
  message:
   'A BTCPay notification event for an unknown/unhandled Event has been received, and should probably not have been.',
  data:
   { id: 'PP3pqtPsPW7bYdPQ3XceHG',
     url: null,
     posData: null,
     status: 'expired',
     btcPrice: null,
     price: 27.088686993990365,
     currency: 'USD',
     invoiceTime: 1583035455000,
     expirationTime: 1583046255000,
     currentTime: 1583046255118,
     btcPaid: null,
     btcDue: null,
     rate: 0,
     exceptionStatus: false,
     buyerFields: null,
     transactionCurrency: null,
     paymentSubtotals: { LTC: 60560445 },
     paymentTotals: { LTC: 60560545 },
     amountPaid: '0.00000000',
     exchangeRates: { LTC: [Object] } } }
/invoiceNotificationEvent:body { event: { code: 1004, name: 'invoice_expired' },
  data:
   { id: 'PP3pqtPsPW7bYdPQ3XceHG',
     url: null,
     posData: null,
     status: 'expired',
     btcPrice: null,
     price: 27.088686993990365,
     currency: 'USD',
     invoiceTime: 1583035455000,
     expirationTime: 1583046255000,
     currentTime: 1583046255120,
     btcPaid: null,
     btcDue: null,
     rate: 0,
     exceptionStatus: false,
     buyerFields: null,
     transactionCurrency: null,
     paymentSubtotals: { LTC: 60560445 },
     paymentTotals: { LTC: 60560545 },
     amountPaid: '0.00000000',
     exchangeRates: { LTC: [Object] } } }
url not available on invoice object. Check configs for properties to save
btcPrice not available on invoice object. Check configs for properties to save
btcDue not available on invoice object. Check configs for properties to save
cryptoInfo not available on invoice object. Check configs for properties to save
lowFeeDetected not available on invoice object. Check configs for properties to save
refundAddressRequestPending not available on invoice object. Check configs for properties to save
token not available on invoice object. Check configs for properties to save
minerFees not available on invoice object. Check configs for properties to save
addresses not available on invoice object. Check configs for properties to save
/invoiceNotificationEvent:body { id: 'HyRU6k8LGgJpcvGmLii5Uq',
  url: null,
  posData: null,
  status: 'expired',
  btcPrice: null,
  price: 27.033152905899318,
  currency: 'USD',
  invoiceTime: 1583035617000,
  expirationTime: 1583046417000,
  currentTime: 1583046417200,
  btcPaid: null,
  btcDue: null,
  rate: 0,
  exceptionStatus: false,
  buyerFields: null,
  transactionCurrency: null,
  paymentSubtotals: { LTC: 60436291 },
  paymentTotals: { LTC: 60436391 },
  amountPaid: '0.00000000',
  exchangeRates: { LTC: { USD: 0 } } }
url not available on invoice object. Check configs for properties to save
btcPrice not available on invoice object. Check configs for properties to save
btcDue not available on invoice object. Check configs for properties to save
cryptoInfo not available on invoice object. Check configs for properties to save
lowFeeDetected not available on invoice object. Check configs for properties to save
refundAddressRequestPending not available on invoice object. Check configs for properties to save
token not available on invoice object. Check configs for properties to save
minerFees not available on invoice object. Check configs for properties to save
addresses not available on invoice object. Check configs for properties to save
A BTCPay notification event for an unknown/unhandled Event has been received, and should probably not have been. { errorCode: 'UnhandledNotificationEventWarning',
  message:
   'A BTCPay notification event for an unknown/unhandled Event has been received, and should probably not have been.',
  data:
   { id: 'HyRU6k8LGgJpcvGmLii5Uq',
     url: null,
     posData: null,
     status: 'expired',
     btcPrice: null,
     price: 27.033152905899318,
     currency: 'USD',
     invoiceTime: 1583035617000,
     expirationTime: 1583046417000,
     currentTime: 1583046417200,
     btcPaid: null,
     btcDue: null,
     rate: 0,
     exceptionStatus: false,
     buyerFields: null,
     transactionCurrency: null,
     paymentSubtotals: { LTC: 60436291 },
     paymentTotals: { LTC: 60436391 },
     amountPaid: '0.00000000',
     exchangeRates: { LTC: [Object] } } }
/invoiceNotificationEvent:body { event: { code: 1004, name: 'invoice_expired' },
  data:
   { id: 'HyRU6k8LGgJpcvGmLii5Uq',
     url: null,
     posData: null,
     status: 'expired',
     btcPrice: null,
     price: 27.033152905899318,
     currency: 'USD',
     invoiceTime: 1583035617000,
     expirationTime: 1583046417000,
     currentTime: 1583046417207,
     btcPaid: null,
     btcDue: null,
     rate: 0,
     exceptionStatus: false,
     buyerFields: null,
     transactionCurrency: null,
     paymentSubtotals: { LTC: 60436291 },
     paymentTotals: { LTC: 60436391 },
     amountPaid: '0.00000000',
     exchangeRates: { LTC: [Object] } } }
url not available on invoice object. Check configs for properties to save
btcPrice not available on invoice object. Check configs for properties to save
btcDue not available on invoice object. Check configs for properties to save
cryptoInfo not available on invoice object. Check configs for properties to save
lowFeeDetected not available on invoice object. Check configs for properties to save
refundAddressRequestPending not available on invoice object. Check configs for properties to save
token not available on invoice object. Check configs for properties to save
minerFees not available on invoice object. Check configs for properties to save
addresses not available on invoice object. Check configs for properties to save
currency code requested : BTC
getLatestEosActivationPriceInSelectedCryptoCurrency().cryptoPricing received 25 cryptos
eosPricingResponse:  { _id: 'eosPrices',
  _rev: '631633-e92a8d272045fa805006b7bb29c1afed',
  ram: '0.05974',
  net: '0.0003313629762218',
  cpu: '0.3445074965807333' }
stakeNetQuantity: 0.1000
stakeCpuQuantity: 6.8901
totalEos: 7.47949008
{ BTC_USD: '8577.63533693' }
{ EOS_USD: '3.57087160875' }
valuesInUSD:  [ { BTC_USD: '8577.63533693' }, { EOS_USD: '3.57087160875' } ]
eosActivationFee:  7.47949008
eosActivationFee in USD:  26.7082987745992662
calculated eosActivationFee in : BTC:  0.000416300235
Error creating invoice: { StatusCodeError: 400 - {"error":"No payment method available for this store\n3/1/20 8:49:53 AM: Creation of invoice starting\n3/1/20 8:49:53 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\n3/1/20 8:49:53 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\n3/1/20 8:49:53 AM: LTC_USD: Rate rule error (RateUnavailable)\n3/1/20 8:49:53 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 8:49:53 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 8:49:53 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 8:49:53 AM: BTC_USD: Rate rule error (RateUnavailable)\n3/1/20 8:49:53 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 8:49:53 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 8:49:53 AM: FTC_USD: The evaluated rating rule is ((0.00000091, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 8:49:53 AM: FTC_USD: Rate rule error (RateUnavailable)\n3/1/20 8:49:53 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n"}
    at new StatusCodeError (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request-promise-core/lib/errors.js:32:15)
    at Request.plumbing.callback (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request-promise-core/lib/plumbing.js:104:33)
    at Request.RP$callback [as _callback] (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request-promise-core/lib/plumbing.js:46:31)
    at Request.self.callback (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request/request.js:185:22)
    at Request.emit (events.js:188:13)
    at Request.<anonymous> (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request/request.js:1157:10)
    at Request.emit (events.js:188:13)
    at IncomingMessage.<anonymous> (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request/request.js:1079:12)
    at Object.onceWrapper (events.js:276:13)
    at IncomingMessage.emit (events.js:193:15)
    at endReadableNT (_stream_readable.js:1129:12)
    at process.internalTickCallback (internal/process/next_tick.js:72:19)
  name: 'StatusCodeError',
  statusCode: 400,
  message:
   '400 - {"error":"No payment method available for this store\\n3/1/20 8:49:53 AM: Creation of invoice starting\\n3/1/20 8:49:53 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\\n3/1/20 8:49:53 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\\n3/1/20 8:49:53 AM: LTC_USD: Rate rule error (RateUnavailable)\\n3/1/20 8:49:53 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\\n3/1/20 8:49:53 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\\n3/1/20 8:49:53 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\\n3/1/20 8:49:53 AM: BTC_USD: Rate rule error (RateUnavailable)\\n3/1/20 8:49:53 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\\n3/1/20 8:49:53 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\\n3/1/20 8:49:53 AM: FTC_USD: The evaluated rating rule is ((0.00000091, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\\n3/1/20 8:49:53 AM: FTC_USD: Rate rule error (RateUnavailable)\\n3/1/20 8:49:53 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\\n"}',
  error:
   { error:
      'No payment method available for this store\n3/1/20 8:49:53 AM: Creation of invoice starting\n3/1/20 8:49:53 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\n3/1/20 8:49:53 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\n3/1/20 8:49:53 AM: LTC_USD: Rate rule error (RateUnavailable)\n3/1/20 8:49:53 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 8:49:53 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 8:49:53 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 8:49:53 AM: BTC_USD: Rate rule error (RateUnavailable)\n3/1/20 8:49:53 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 8:49:53 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 8:49:53 AM: FTC_USD: The evaluated rating rule is ((0.00000091, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 8:49:53 AM: FTC_USD: Rate rule error (RateUnavailable)\n3/1/20 8:49:53 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n' },
  options:
   { headers:
      { 'Content-Type': 'application/json',
        Accept: 'application/json',
        'X-Accept-Version': '2.0.0',
        'X-Identity':
         '02a9c547925413f26593dc0b5bf2b08b48ce1cb16d70fc50e034ad476b109f8c83',
        'X-Signature':
         '3046022100f983aa880a466eb59c75e6b29b70327e9db4bdf1e4fcd6b936a78f3bdae606f7022100f8c7b4260279117a43e42cf54894ae72a49641d99454701ef1196bcf9704e000' },
     json: true,
     uri: 'https://btcpay135208.lndyn.com/invoices',
     body:
      { price: '26.7082987745992662',
        currency: 'USD',
        notificationEmail: null,
        notificationURL:
         'https://eos-pay-sf2.edgesecure.co/api/v1/invoiceNotificationEvent/',
        extendedNotifications: true,
        physical: false,
        token: '7Ajvti4uAfQuJSvUN3kvD2KCktzAQy528p3QcPZXuFjc' },
     method: 'POST',
     callback: [Function: RP$callback],
     transform: undefined,
     simple: true,
     resolveWithFullResponse: false,
     transform2xxOnly: false },
  response:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        close: [Array],
        data: [Function],
        error: [Function] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'btcpay135208.lndyn.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 7,
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'btcpay135208.lndyn.com',
        _readableState: [ReadableState],
        readable: false,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 914,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 1629,
        [Symbol(kBytesWritten)]: 680,
        [Symbol(connect-options)]: [Object] },
     connection:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'btcpay135208.lndyn.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 7,
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'btcpay135208.lndyn.com',
        _readableState: [ReadableState],
        readable: false,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 914,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 1629,
        [Symbol(kBytesWritten)]: 680,
        [Symbol(connect-options)]: [Object] },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { server: 'nginx',
        date: 'Sun, 01 Mar 2020 08:49:53 GMT',
        'content-type': 'application/json',
        'transfer-encoding': 'chunked',
        connection: 'close',
        'referrer-policy': 'same-origin',
        'x-xss-protection': '1; mode=block',
        'x-content-type-options': 'nosniff',
        'x-frame-options': 'DENY',
        'strict-transport-security': 'max-age=31536000' },
     rawHeaders:
      [ 'Server',
        'nginx',
        'Date',
        'Sun, 01 Mar 2020 08:49:53 GMT',
        'Content-Type',
        'application/json',
        'Transfer-Encoding',
        'chunked',
        'Connection',
        'close',
        'Referrer-Policy',
        'same-origin',
        'X-XSS-Protection',
        '1; mode=block',
        'X-Content-Type-Options',
        'nosniff',
        'X-Frame-Options',
        'DENY',
        'Strict-Transport-Security',
        'max-age=31536000' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 400,
     statusMessage: 'Bad Request',
     client:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'btcpay135208.lndyn.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 7,
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'btcpay135208.lndyn.com',
        _readableState: [ReadableState],
        readable: false,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 914,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 1629,
        [Symbol(kBytesWritten)]: 680,
        [Symbol(connect-options)]: [Object] },
     _consuming: true,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [TLSSocket],
        connection: [TLSSocket],
        _header:
         'POST /invoices HTTP/1.1\r\nContent-Type: application/json\r\nAccept: application/json\r\nX-Accept-Version: 2.0.0\r\nX-Identity: 02a9c547925413f26593dc0b5bf2b08b48ce1cb16d70fc50e034ad476b109f8c83\r\nX-Signature: 3046022100f983aa880a466eb59c75e6b29b70327e9db4bdf1e4fcd6b936a78f3bdae606f7022100f8c7b4260279117a43e42cf54894ae72a49641d99454701ef1196bcf9704e000\r\nhost: btcpay135208.lndyn.com\r\ncontent-length: 261\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/invoices',
        _ended: true,
        res: [Circular],
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     request:
      Request {
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        headers: [Object],
        uri: [Url],
        body:
         '{"price":"26.7082987745992662","currency":"USD","notificationEmail":null,"notificationURL":"https://eos-pay-sf2.edgesecure.co/api/v1/invoiceNotificationEvent/","extendedNotifications":true,"physical":false,"token":"7Ajvti4uAfQuJSvUN3kvD2KCktzAQy528p3QcPZXuFjc"}',
        method: 'POST',
        readable: true,
        writable: true,
        explicitMethod: true,
        _qs: [Querystring],
        _auth: [Auth],
        _oauth: [OAuth],
        _multipart: [Multipart],
        _redirect: [Redirect],
        _tunnel: [Tunnel],
        _rp_resolve: [Function],
        _rp_reject: [Function],
        _rp_promise: [Promise],
        _rp_callbackOrig: undefined,
        callback: [Function],
        _rp_options: [Object],
        setHeader: [Function],
        hasHeader: [Function],
        getHeader: [Function],
        removeHeader: [Function],
        localAddress: undefined,
        pool: {},
        dests: [],
        __isRequestRequest: true,
        _callback: [Function: RP$callback],
        proxy: null,
        tunnel: true,
        setHost: true,
        originalCookieHeader: undefined,
        _disableCookies: true,
        _jar: undefined,
        port: 443,
        host: 'btcpay135208.lndyn.com',
        path: '/invoices',
        _json: true,
        httpModule: [Object],
        agentClass: [Function: Agent],
        agent: [Agent],
        _started: true,
        href: 'https://btcpay135208.lndyn.com/invoices',
        req: [ClientRequest],
        ntick: true,
        response: [Circular],
        originalHost: 'btcpay135208.lndyn.com',
        originalHostHeaderName: 'host',
        responseContent: [Circular],
        _destdata: true,
        _ended: true,
        _callbackCalled: true },
     toJSON: [Function: responseToJSON],
     caseless: Caseless { dict: [Object] },
     body:
      { error:
         'No payment method available for this store\n3/1/20 8:49:53 AM: Creation of invoice starting\n3/1/20 8:49:53 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\n3/1/20 8:49:53 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\n3/1/20 8:49:53 AM: LTC_USD: Rate rule error (RateUnavailable)\n3/1/20 8:49:53 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 8:49:53 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 8:49:53 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 8:49:53 AM: BTC_USD: Rate rule error (RateUnavailable)\n3/1/20 8:49:53 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 8:49:53 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 8:49:53 AM: FTC_USD: The evaluated rating rule is ((0.00000091, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 8:49:53 AM: FTC_USD: Rate rule error (RateUnavailable)\n3/1/20 8:49:53 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n' } } }
currency code requested : BTC
getLatestEosActivationPriceInSelectedCryptoCurrency().cryptoPricing received 25 cryptos
stakeNetQuantity: 0.1000
stakeCpuQuantity: 6.8901
totalEos: 7.47949008
{ BTC_USD: '8577.63533693' }
{ EOS_USD: '3.57087160875' }
valuesInUSD:  [ { BTC_USD: '8577.63533693' }, { EOS_USD: '3.57087160875' } ]
eosActivationFee:  7.47949008
eosActivationFee in USD:  26.7082987745992662
calculated eosActivationFee in : BTC:  0.000416300235
Error creating invoice: { StatusCodeError: 400 - {"error":"No payment method available for this store\n3/1/20 9:05:37 AM: Creation of invoice starting\n3/1/20 9:05:37 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\n3/1/20 9:05:37 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\n3/1/20 9:05:37 AM: LTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:05:37 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:05:37 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:05:37 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:05:37 AM: BTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:05:37 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:05:37 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:05:37 AM: FTC_USD: The evaluated rating rule is ((0.0000009, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:05:37 AM: FTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:05:37 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n"}
    at new StatusCodeError (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request-promise-core/lib/errors.js:32:15)
    at Request.plumbing.callback (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request-promise-core/lib/plumbing.js:104:33)
    at Request.RP$callback [as _callback] (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request-promise-core/lib/plumbing.js:46:31)
    at Request.self.callback (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request/request.js:185:22)
    at Request.emit (events.js:188:13)
    at Request.<anonymous> (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request/request.js:1157:10)
    at Request.emit (events.js:188:13)
    at IncomingMessage.<anonymous> (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request/request.js:1079:12)
    at Object.onceWrapper (events.js:276:13)
    at IncomingMessage.emit (events.js:193:15)
    at endReadableNT (_stream_readable.js:1129:12)
    at process.internalTickCallback (internal/process/next_tick.js:72:19)
  name: 'StatusCodeError',
  statusCode: 400,
  message:
   '400 - {"error":"No payment method available for this store\\n3/1/20 9:05:37 AM: Creation of invoice starting\\n3/1/20 9:05:37 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\\n3/1/20 9:05:37 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\\n3/1/20 9:05:37 AM: LTC_USD: Rate rule error (RateUnavailable)\\n3/1/20 9:05:37 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\\n3/1/20 9:05:37 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\\n3/1/20 9:05:37 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\\n3/1/20 9:05:37 AM: BTC_USD: Rate rule error (RateUnavailable)\\n3/1/20 9:05:37 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\\n3/1/20 9:05:37 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\\n3/1/20 9:05:37 AM: FTC_USD: The evaluated rating rule is ((0.0000009, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\\n3/1/20 9:05:37 AM: FTC_USD: Rate rule error (RateUnavailable)\\n3/1/20 9:05:37 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\\n"}',
  error:
   { error:
      'No payment method available for this store\n3/1/20 9:05:37 AM: Creation of invoice starting\n3/1/20 9:05:37 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\n3/1/20 9:05:37 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\n3/1/20 9:05:37 AM: LTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:05:37 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:05:37 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:05:37 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:05:37 AM: BTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:05:37 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:05:37 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:05:37 AM: FTC_USD: The evaluated rating rule is ((0.0000009, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:05:37 AM: FTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:05:37 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n' },
  options:
   { headers:
      { 'Content-Type': 'application/json',
        Accept: 'application/json',
        'X-Accept-Version': '2.0.0',
        'X-Identity':
         '02a9c547925413f26593dc0b5bf2b08b48ce1cb16d70fc50e034ad476b109f8c83',
        'X-Signature':
         '3046022100f983aa880a466eb59c75e6b29b70327e9db4bdf1e4fcd6b936a78f3bdae606f7022100f8c7b4260279117a43e42cf54894ae72a49641d99454701ef1196bcf9704e000' },
     json: true,
     uri: 'https://btcpay135208.lndyn.com/invoices',
     body:
      { price: '26.7082987745992662',
        currency: 'USD',
        notificationEmail: null,
        notificationURL:
         'https://eos-pay-sf2.edgesecure.co/api/v1/invoiceNotificationEvent/',
        extendedNotifications: true,
        physical: false,
        token: '7Ajvti4uAfQuJSvUN3kvD2KCktzAQy528p3QcPZXuFjc' },
     method: 'POST',
     callback: [Function: RP$callback],
     transform: undefined,
     simple: true,
     resolveWithFullResponse: false,
     transform2xxOnly: false },
  response:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        close: [Array],
        data: [Function],
        error: [Function] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'btcpay135208.lndyn.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 7,
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'btcpay135208.lndyn.com',
        _readableState: [ReadableState],
        readable: false,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 1078,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 1628,
        [Symbol(kBytesWritten)]: 680,
        [Symbol(connect-options)]: [Object] },
     connection:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'btcpay135208.lndyn.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 7,
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'btcpay135208.lndyn.com',
        _readableState: [ReadableState],
        readable: false,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 1078,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 1628,
        [Symbol(kBytesWritten)]: 680,
        [Symbol(connect-options)]: [Object] },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { server: 'nginx',
        date: 'Sun, 01 Mar 2020 09:05:37 GMT',
        'content-type': 'application/json',
        'transfer-encoding': 'chunked',
        connection: 'close',
        'referrer-policy': 'same-origin',
        'x-xss-protection': '1; mode=block',
        'x-content-type-options': 'nosniff',
        'x-frame-options': 'DENY',
        'strict-transport-security': 'max-age=31536000' },
     rawHeaders:
      [ 'Server',
        'nginx',
        'Date',
        'Sun, 01 Mar 2020 09:05:37 GMT',
        'Content-Type',
        'application/json',
        'Transfer-Encoding',
        'chunked',
        'Connection',
        'close',
        'Referrer-Policy',
        'same-origin',
        'X-XSS-Protection',
        '1; mode=block',
        'X-Content-Type-Options',
        'nosniff',
        'X-Frame-Options',
        'DENY',
        'Strict-Transport-Security',
        'max-age=31536000' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 400,
     statusMessage: 'Bad Request',
     client:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'btcpay135208.lndyn.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 7,
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'btcpay135208.lndyn.com',
        _readableState: [ReadableState],
        readable: false,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 1078,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 1628,
        [Symbol(kBytesWritten)]: 680,
        [Symbol(connect-options)]: [Object] },
     _consuming: true,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [TLSSocket],
        connection: [TLSSocket],
        _header:
         'POST /invoices HTTP/1.1\r\nContent-Type: application/json\r\nAccept: application/json\r\nX-Accept-Version: 2.0.0\r\nX-Identity: 02a9c547925413f26593dc0b5bf2b08b48ce1cb16d70fc50e034ad476b109f8c83\r\nX-Signature: 3046022100f983aa880a466eb59c75e6b29b70327e9db4bdf1e4fcd6b936a78f3bdae606f7022100f8c7b4260279117a43e42cf54894ae72a49641d99454701ef1196bcf9704e000\r\nhost: btcpay135208.lndyn.com\r\ncontent-length: 261\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/invoices',
        _ended: true,
        res: [Circular],
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     request:
      Request {
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        headers: [Object],
        uri: [Url],
        body:
         '{"price":"26.7082987745992662","currency":"USD","notificationEmail":null,"notificationURL":"https://eos-pay-sf2.edgesecure.co/api/v1/invoiceNotificationEvent/","extendedNotifications":true,"physical":false,"token":"7Ajvti4uAfQuJSvUN3kvD2KCktzAQy528p3QcPZXuFjc"}',
        method: 'POST',
        readable: true,
        writable: true,
        explicitMethod: true,
        _qs: [Querystring],
        _auth: [Auth],
        _oauth: [OAuth],
        _multipart: [Multipart],
        _redirect: [Redirect],
        _tunnel: [Tunnel],
        _rp_resolve: [Function],
        _rp_reject: [Function],
        _rp_promise: [Promise],
        _rp_callbackOrig: undefined,
        callback: [Function],
        _rp_options: [Object],
        setHeader: [Function],
        hasHeader: [Function],
        getHeader: [Function],
        removeHeader: [Function],
        localAddress: undefined,
        pool: {},
        dests: [],
        __isRequestRequest: true,
        _callback: [Function: RP$callback],
        proxy: null,
        tunnel: true,
        setHost: true,
        originalCookieHeader: undefined,
        _disableCookies: true,
        _jar: undefined,
        port: 443,
        host: 'btcpay135208.lndyn.com',
        path: '/invoices',
        _json: true,
        httpModule: [Object],
        agentClass: [Function: Agent],
        agent: [Agent],
        _started: true,
        href: 'https://btcpay135208.lndyn.com/invoices',
        req: [ClientRequest],
        ntick: true,
        response: [Circular],
        originalHost: 'btcpay135208.lndyn.com',
        originalHostHeaderName: 'host',
        responseContent: [Circular],
        _destdata: true,
        _ended: true,
        _callbackCalled: true },
     toJSON: [Function: responseToJSON],
     caseless: Caseless { dict: [Object] },
     body:
      { error:
         'No payment method available for this store\n3/1/20 9:05:37 AM: Creation of invoice starting\n3/1/20 9:05:37 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\n3/1/20 9:05:37 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\n3/1/20 9:05:37 AM: LTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:05:37 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:05:37 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:05:37 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:05:37 AM: BTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:05:37 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:05:37 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:05:37 AM: FTC_USD: The evaluated rating rule is ((0.0000009, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:05:37 AM: FTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:05:37 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n' } } }
currency code requested : LTC
getLatestEosActivationPriceInSelectedCryptoCurrency().cryptoPricing received 25 cryptos
stakeNetQuantity: 0.1000
stakeCpuQuantity: 6.8901
totalEos: 7.47949008
{ LTC_USD: '58.9863245055' }
{ EOS_USD: '3.57087160875' }
valuesInUSD:  [ { LTC_USD: '58.9863245055' }, { EOS_USD: '3.57087160875' } ]
eosActivationFee:  7.47949008
eosActivationFee in USD:  26.7082987745992662
calculated eosActivationFee in : LTC:  0.060537279423
Error creating invoice: { StatusCodeError: 400 - {"error":"No payment method available for this store\n3/1/20 9:15:50 AM: Creation of invoice starting\n3/1/20 9:15:50 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\n3/1/20 9:15:50 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\n3/1/20 9:15:50 AM: LTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:15:50 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:15:50 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:15:50 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:15:50 AM: BTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:15:50 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:15:50 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:15:50 AM: FTC_USD: The evaluated rating rule is ((0.0000009, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:15:50 AM: FTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:15:50 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n"}
    at new StatusCodeError (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request-promise-core/lib/errors.js:32:15)
    at Request.plumbing.callback (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request-promise-core/lib/plumbing.js:104:33)
    at Request.RP$callback [as _callback] (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request-promise-core/lib/plumbing.js:46:31)
    at Request.self.callback (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request/request.js:185:22)
    at Request.emit (events.js:188:13)
    at Request.<anonymous> (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request/request.js:1157:10)
    at Request.emit (events.js:188:13)
    at IncomingMessage.<anonymous> (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request/request.js:1079:12)
    at Object.onceWrapper (events.js:276:13)
    at IncomingMessage.emit (events.js:193:15)
    at endReadableNT (_stream_readable.js:1129:12)
    at process.internalTickCallback (internal/process/next_tick.js:72:19)
  name: 'StatusCodeError',
  statusCode: 400,
  message:
   '400 - {"error":"No payment method available for this store\\n3/1/20 9:15:50 AM: Creation of invoice starting\\n3/1/20 9:15:50 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\\n3/1/20 9:15:50 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\\n3/1/20 9:15:50 AM: LTC_USD: Rate rule error (RateUnavailable)\\n3/1/20 9:15:50 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\\n3/1/20 9:15:50 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\\n3/1/20 9:15:50 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\\n3/1/20 9:15:50 AM: BTC_USD: Rate rule error (RateUnavailable)\\n3/1/20 9:15:50 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\\n3/1/20 9:15:50 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\\n3/1/20 9:15:50 AM: FTC_USD: The evaluated rating rule is ((0.0000009, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\\n3/1/20 9:15:50 AM: FTC_USD: Rate rule error (RateUnavailable)\\n3/1/20 9:15:50 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\\n"}',
  error:
   { error:
      'No payment method available for this store\n3/1/20 9:15:50 AM: Creation of invoice starting\n3/1/20 9:15:50 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\n3/1/20 9:15:50 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\n3/1/20 9:15:50 AM: LTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:15:50 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:15:50 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:15:50 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:15:50 AM: BTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:15:50 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:15:50 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:15:50 AM: FTC_USD: The evaluated rating rule is ((0.0000009, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:15:50 AM: FTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:15:50 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n' },
  options:
   { headers:
      { 'Content-Type': 'application/json',
        Accept: 'application/json',
        'X-Accept-Version': '2.0.0',
        'X-Identity':
         '02a9c547925413f26593dc0b5bf2b08b48ce1cb16d70fc50e034ad476b109f8c83',
        'X-Signature':
         '3046022100f983aa880a466eb59c75e6b29b70327e9db4bdf1e4fcd6b936a78f3bdae606f7022100f8c7b4260279117a43e42cf54894ae72a49641d99454701ef1196bcf9704e000' },
     json: true,
     uri: 'https://btcpay135208.lndyn.com/invoices',
     body:
      { price: '26.7082987745992662',
        currency: 'USD',
        notificationEmail: null,
        notificationURL:
         'https://eos-pay-sf2.edgesecure.co/api/v1/invoiceNotificationEvent/',
        extendedNotifications: true,
        physical: false,
        token: '7Ajvti4uAfQuJSvUN3kvD2KCktzAQy528p3QcPZXuFjc' },
     method: 'POST',
     callback: [Function: RP$callback],
     transform: undefined,
     simple: true,
     resolveWithFullResponse: false,
     transform2xxOnly: false },
  response:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        close: [Array],
        data: [Function],
        error: [Function] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'btcpay135208.lndyn.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 7,
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'btcpay135208.lndyn.com',
        _readableState: [ReadableState],
        readable: false,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 1146,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 1635,
        [Symbol(kBytesWritten)]: 680,
        [Symbol(connect-options)]: [Object] },
     connection:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'btcpay135208.lndyn.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 7,
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'btcpay135208.lndyn.com',
        _readableState: [ReadableState],
        readable: false,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 1146,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 1635,
        [Symbol(kBytesWritten)]: 680,
        [Symbol(connect-options)]: [Object] },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { server: 'nginx',
        date: 'Sun, 01 Mar 2020 09:15:50 GMT',
        'content-type': 'application/json',
        'transfer-encoding': 'chunked',
        connection: 'close',
        'referrer-policy': 'same-origin',
        'x-xss-protection': '1; mode=block',
        'x-content-type-options': 'nosniff',
        'x-frame-options': 'DENY',
        'strict-transport-security': 'max-age=31536000' },
     rawHeaders:
      [ 'Server',
        'nginx',
        'Date',
        'Sun, 01 Mar 2020 09:15:50 GMT',
        'Content-Type',
        'application/json',
        'Transfer-Encoding',
        'chunked',
        'Connection',
        'close',
        'Referrer-Policy',
        'same-origin',
        'X-XSS-Protection',
        '1; mode=block',
        'X-Content-Type-Options',
        'nosniff',
        'X-Frame-Options',
        'DENY',
        'Strict-Transport-Security',
        'max-age=31536000' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 400,
     statusMessage: 'Bad Request',
     client:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'btcpay135208.lndyn.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 7,
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'btcpay135208.lndyn.com',
        _readableState: [ReadableState],
        readable: false,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 1146,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 1635,
        [Symbol(kBytesWritten)]: 680,
        [Symbol(connect-options)]: [Object] },
     _consuming: true,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [TLSSocket],
        connection: [TLSSocket],
        _header:
         'POST /invoices HTTP/1.1\r\nContent-Type: application/json\r\nAccept: application/json\r\nX-Accept-Version: 2.0.0\r\nX-Identity: 02a9c547925413f26593dc0b5bf2b08b48ce1cb16d70fc50e034ad476b109f8c83\r\nX-Signature: 3046022100f983aa880a466eb59c75e6b29b70327e9db4bdf1e4fcd6b936a78f3bdae606f7022100f8c7b4260279117a43e42cf54894ae72a49641d99454701ef1196bcf9704e000\r\nhost: btcpay135208.lndyn.com\r\ncontent-length: 261\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/invoices',
        _ended: true,
        res: [Circular],
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     request:
      Request {
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        headers: [Object],
        uri: [Url],
        body:
         '{"price":"26.7082987745992662","currency":"USD","notificationEmail":null,"notificationURL":"https://eos-pay-sf2.edgesecure.co/api/v1/invoiceNotificationEvent/","extendedNotifications":true,"physical":false,"token":"7Ajvti4uAfQuJSvUN3kvD2KCktzAQy528p3QcPZXuFjc"}',
        method: 'POST',
        readable: true,
        writable: true,
        explicitMethod: true,
        _qs: [Querystring],
        _auth: [Auth],
        _oauth: [OAuth],
        _multipart: [Multipart],
        _redirect: [Redirect],
        _tunnel: [Tunnel],
        _rp_resolve: [Function],
        _rp_reject: [Function],
        _rp_promise: [Promise],
        _rp_callbackOrig: undefined,
        callback: [Function],
        _rp_options: [Object],
        setHeader: [Function],
        hasHeader: [Function],
        getHeader: [Function],
        removeHeader: [Function],
        localAddress: undefined,
        pool: {},
        dests: [],
        __isRequestRequest: true,
        _callback: [Function: RP$callback],
        proxy: null,
        tunnel: true,
        setHost: true,
        originalCookieHeader: undefined,
        _disableCookies: true,
        _jar: undefined,
        port: 443,
        host: 'btcpay135208.lndyn.com',
        path: '/invoices',
        _json: true,
        httpModule: [Object],
        agentClass: [Function: Agent],
        agent: [Agent],
        _started: true,
        href: 'https://btcpay135208.lndyn.com/invoices',
        req: [ClientRequest],
        ntick: true,
        response: [Circular],
        originalHost: 'btcpay135208.lndyn.com',
        originalHostHeaderName: 'host',
        responseContent: [Circular],
        _destdata: true,
        _ended: true,
        _callbackCalled: true },
     toJSON: [Function: responseToJSON],
     caseless: Caseless { dict: [Object] },
     body:
      { error:
         'No payment method available for this store\n3/1/20 9:15:50 AM: Creation of invoice starting\n3/1/20 9:15:50 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\n3/1/20 9:15:50 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\n3/1/20 9:15:50 AM: LTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:15:50 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:15:50 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:15:50 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:15:50 AM: BTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:15:50 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:15:50 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:15:50 AM: FTC_USD: The evaluated rating rule is ((0.0000009, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:15:50 AM: FTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:15:50 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n' } } }
currency code requested : BTC
getLatestEosActivationPriceInSelectedCryptoCurrency().cryptoPricing received 25 cryptos
stakeNetQuantity: 0.1000
stakeCpuQuantity: 6.8901
totalEos: 7.47949008
{ BTC_USD: '8577.63533693' }
{ EOS_USD: '3.57087160875' }
valuesInUSD:  [ { BTC_USD: '8577.63533693' }, { EOS_USD: '3.57087160875' } ]
eosActivationFee:  7.47949008
eosActivationFee in USD:  26.7082987745992662
calculated eosActivationFee in : BTC:  0.000416300235
Error creating invoice: { StatusCodeError: 504 - "<html>\r\n<head><title>504 Gateway Time-out</title></head>\r\n<body bgcolor=\"white\">\r\n<center><h1>504 Gateway Time-out</h1></center>\r\n<hr><center>nginx</center>\r\n</body>\r\n</html>\r\n"
    at new StatusCodeError (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request-promise-core/lib/errors.js:32:15)
    at Request.plumbing.callback (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request-promise-core/lib/plumbing.js:104:33)
    at Request.RP$callback [as _callback] (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request-promise-core/lib/plumbing.js:46:31)
    at Request.self.callback (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request/request.js:185:22)
    at Request.emit (events.js:188:13)
    at Request.<anonymous> (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request/request.js:1157:10)
    at Request.emit (events.js:188:13)
    at IncomingMessage.<anonymous> (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request/request.js:1079:12)
    at Object.onceWrapper (events.js:276:13)
    at IncomingMessage.emit (events.js:193:15)
    at endReadableNT (_stream_readable.js:1129:12)
    at process.internalTickCallback (internal/process/next_tick.js:72:19)
  name: 'StatusCodeError',
  statusCode: 504,
  message:
   '504 - "<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body bgcolor=\\"white\\">\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n"',
  error:
   '<html>\r\n<head><title>504 Gateway Time-out</title></head>\r\n<body bgcolor="white">\r\n<center><h1>504 Gateway Time-out</h1></center>\r\n<hr><center>nginx</center>\r\n</body>\r\n</html>\r\n',
  options:
   { headers:
      { 'Content-Type': 'application/json',
        Accept: 'application/json',
        'X-Accept-Version': '2.0.0',
        'X-Identity':
         '02a9c547925413f26593dc0b5bf2b08b48ce1cb16d70fc50e034ad476b109f8c83',
        'X-Signature':
         '3046022100f983aa880a466eb59c75e6b29b70327e9db4bdf1e4fcd6b936a78f3bdae606f7022100f8c7b4260279117a43e42cf54894ae72a49641d99454701ef1196bcf9704e000' },
     json: true,
     uri: 'https://btcpay135208.lndyn.com/invoices',
     body:
      { price: '26.7082987745992662',
        currency: 'USD',
        notificationEmail: null,
        notificationURL:
         'https://eos-pay-sf2.edgesecure.co/api/v1/invoiceNotificationEvent/',
        extendedNotifications: true,
        physical: false,
        token: '7Ajvti4uAfQuJSvUN3kvD2KCktzAQy528p3QcPZXuFjc' },
     method: 'POST',
     callback: [Function: RP$callback],
     transform: undefined,
     simple: true,
     resolveWithFullResponse: false,
     transform2xxOnly: false },
  response:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: null,
        encoding: null },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        close: [Array],
        data: [Function],
        error: [Function] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'btcpay135208.lndyn.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 7,
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'btcpay135208.lndyn.com',
        _readableState: [ReadableState],
        readable: false,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 1220,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 371,
        [Symbol(kBytesWritten)]: 680,
        [Symbol(connect-options)]: [Object] },
     connection:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'btcpay135208.lndyn.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 7,
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'btcpay135208.lndyn.com',
        _readableState: [ReadableState],
        readable: false,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 1220,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 371,
        [Symbol(kBytesWritten)]: 680,
        [Symbol(connect-options)]: [Object] },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { server: 'nginx',
        date: 'Sun, 01 Mar 2020 09:17:14 GMT',
        'content-type': 'text/html',
        'content-length': '176',
        connection: 'close',
        'strict-transport-security': 'max-age=31536000' },
     rawHeaders:
      [ 'Server',
        'nginx',
        'Date',
        'Sun, 01 Mar 2020 09:17:14 GMT',
        'Content-Type',
        'text/html',
        'Content-Length',
        '176',
        'Connection',
        'close',
        'Strict-Transport-Security',
        'max-age=31536000' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 504,
     statusMessage: 'Gateway Time-out',
     client:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'btcpay135208.lndyn.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 7,
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'btcpay135208.lndyn.com',
        _readableState: [ReadableState],
        readable: false,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 1220,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 371,
        [Symbol(kBytesWritten)]: 680,
        [Symbol(connect-options)]: [Object] },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [TLSSocket],
        connection: [TLSSocket],
        _header:
         'POST /invoices HTTP/1.1\r\nContent-Type: application/json\r\nAccept: application/json\r\nX-Accept-Version: 2.0.0\r\nX-Identity: 02a9c547925413f26593dc0b5bf2b08b48ce1cb16d70fc50e034ad476b109f8c83\r\nX-Signature: 3046022100f983aa880a466eb59c75e6b29b70327e9db4bdf1e4fcd6b936a78f3bdae606f7022100f8c7b4260279117a43e42cf54894ae72a49641d99454701ef1196bcf9704e000\r\nhost: btcpay135208.lndyn.com\r\ncontent-length: 261\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/invoices',
        _ended: true,
        res: [Circular],
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     request:
      Request {
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        headers: [Object],
        uri: [Url],
        body:
         '{"price":"26.7082987745992662","currency":"USD","notificationEmail":null,"notificationURL":"https://eos-pay-sf2.edgesecure.co/api/v1/invoiceNotificationEvent/","extendedNotifications":true,"physical":false,"token":"7Ajvti4uAfQuJSvUN3kvD2KCktzAQy528p3QcPZXuFjc"}',
        method: 'POST',
        readable: true,
        writable: true,
        explicitMethod: true,
        _qs: [Querystring],
        _auth: [Auth],
        _oauth: [OAuth],
        _multipart: [Multipart],
        _redirect: [Redirect],
        _tunnel: [Tunnel],
        _rp_resolve: [Function],
        _rp_reject: [Function],
        _rp_promise: [Promise],
        _rp_callbackOrig: undefined,
        callback: [Function],
        _rp_options: [Object],
        setHeader: [Function],
        hasHeader: [Function],
        getHeader: [Function],
        removeHeader: [Function],
        localAddress: undefined,
        pool: {},
        dests: [],
        __isRequestRequest: true,
        _callback: [Function: RP$callback],
        proxy: null,
        tunnel: true,
        setHost: true,
        originalCookieHeader: undefined,
        _disableCookies: true,
        _jar: undefined,
        port: 443,
        host: 'btcpay135208.lndyn.com',
        path: '/invoices',
        _json: true,
        httpModule: [Object],
        agentClass: [Function: Agent],
        agent: [Agent],
        _started: true,
        href: 'https://btcpay135208.lndyn.com/invoices',
        req: [ClientRequest],
        ntick: true,
        response: [Circular],
        originalHost: 'btcpay135208.lndyn.com',
        originalHostHeaderName: 'host',
        responseContent: [Circular],
        _destdata: true,
        _ended: true,
        _callbackCalled: true },
     toJSON: [Function: responseToJSON],
     caseless: Caseless { dict: [Object] },
     body:
      '<html>\r\n<head><title>504 Gateway Time-out</title></head>\r\n<body bgcolor="white">\r\n<center><h1>504 Gateway Time-out</h1></center>\r\n<hr><center>nginx</center>\r\n</body>\r\n</html>\r\n' } }
currency code requested : BTC
getLatestEosActivationPriceInSelectedCryptoCurrency().cryptoPricing received 25 cryptos
stakeNetQuantity: 0.1000
stakeCpuQuantity: 6.8901
totalEos: 7.47949008
{ BTC_USD: '8577.63533693' }
{ EOS_USD: '3.57087160875' }
valuesInUSD:  [ { BTC_USD: '8577.63533693' }, { EOS_USD: '3.57087160875' } ]
eosActivationFee:  7.47949008
eosActivationFee in USD:  26.7082987745992662
calculated eosActivationFee in : BTC:  0.000416300235
Error creating invoice: { StatusCodeError: 400 - {"error":"No payment method available for this store\n3/1/20 9:18:43 AM: Creation of invoice starting\n3/1/20 9:18:43 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\n3/1/20 9:18:43 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\n3/1/20 9:18:43 AM: LTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:18:43 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:18:43 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:18:43 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:18:43 AM: BTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:18:43 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:18:43 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:18:43 AM: FTC_USD: The evaluated rating rule is ((0.0000009, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:18:43 AM: FTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:18:43 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n"}
    at new StatusCodeError (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request-promise-core/lib/errors.js:32:15)
    at Request.plumbing.callback (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request-promise-core/lib/plumbing.js:104:33)
    at Request.RP$callback [as _callback] (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request-promise-core/lib/plumbing.js:46:31)
    at Request.self.callback (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request/request.js:185:22)
    at Request.emit (events.js:188:13)
    at Request.<anonymous> (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request/request.js:1157:10)
    at Request.emit (events.js:188:13)
    at IncomingMessage.<anonymous> (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request/request.js:1079:12)
    at Object.onceWrapper (events.js:276:13)
    at IncomingMessage.emit (events.js:193:15)
    at endReadableNT (_stream_readable.js:1129:12)
    at process.internalTickCallback (internal/process/next_tick.js:72:19)
  name: 'StatusCodeError',
  statusCode: 400,
  message:
   '400 - {"error":"No payment method available for this store\\n3/1/20 9:18:43 AM: Creation of invoice starting\\n3/1/20 9:18:43 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\\n3/1/20 9:18:43 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\\n3/1/20 9:18:43 AM: LTC_USD: Rate rule error (RateUnavailable)\\n3/1/20 9:18:43 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\\n3/1/20 9:18:43 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\\n3/1/20 9:18:43 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\\n3/1/20 9:18:43 AM: BTC_USD: Rate rule error (RateUnavailable)\\n3/1/20 9:18:43 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\\n3/1/20 9:18:43 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\\n3/1/20 9:18:43 AM: FTC_USD: The evaluated rating rule is ((0.0000009, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\\n3/1/20 9:18:43 AM: FTC_USD: Rate rule error (RateUnavailable)\\n3/1/20 9:18:43 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\\n"}',
  error:
   { error:
      'No payment method available for this store\n3/1/20 9:18:43 AM: Creation of invoice starting\n3/1/20 9:18:43 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\n3/1/20 9:18:43 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\n3/1/20 9:18:43 AM: LTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:18:43 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:18:43 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:18:43 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:18:43 AM: BTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:18:43 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:18:43 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:18:43 AM: FTC_USD: The evaluated rating rule is ((0.0000009, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:18:43 AM: FTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:18:43 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n' },
  options:
   { headers:
      { 'Content-Type': 'application/json',
        Accept: 'application/json',
        'X-Accept-Version': '2.0.0',
        'X-Identity':
         '02a9c547925413f26593dc0b5bf2b08b48ce1cb16d70fc50e034ad476b109f8c83',
        'X-Signature':
         '3046022100f983aa880a466eb59c75e6b29b70327e9db4bdf1e4fcd6b936a78f3bdae606f7022100f8c7b4260279117a43e42cf54894ae72a49641d99454701ef1196bcf9704e000' },
     json: true,
     uri: 'https://btcpay135208.lndyn.com/invoices',
     body:
      { price: '26.7082987745992662',
        currency: 'USD',
        notificationEmail: null,
        notificationURL:
         'https://eos-pay-sf2.edgesecure.co/api/v1/invoiceNotificationEvent/',
        extendedNotifications: true,
        physical: false,
        token: '7Ajvti4uAfQuJSvUN3kvD2KCktzAQy528p3QcPZXuFjc' },
     method: 'POST',
     callback: [Function: RP$callback],
     transform: undefined,
     simple: true,
     resolveWithFullResponse: false,
     transform2xxOnly: false },
  response:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        close: [Array],
        data: [Function],
        error: [Function] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'btcpay135208.lndyn.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 7,
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'btcpay135208.lndyn.com',
        _readableState: [ReadableState],
        readable: false,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 1296,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 1628,
        [Symbol(kBytesWritten)]: 680,
        [Symbol(connect-options)]: [Object] },
     connection:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'btcpay135208.lndyn.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 7,
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'btcpay135208.lndyn.com',
        _readableState: [ReadableState],
        readable: false,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 1296,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 1628,
        [Symbol(kBytesWritten)]: 680,
        [Symbol(connect-options)]: [Object] },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { server: 'nginx',
        date: 'Sun, 01 Mar 2020 09:18:43 GMT',
        'content-type': 'application/json',
        'transfer-encoding': 'chunked',
        connection: 'close',
        'referrer-policy': 'same-origin',
        'x-xss-protection': '1; mode=block',
        'x-content-type-options': 'nosniff',
        'x-frame-options': 'DENY',
        'strict-transport-security': 'max-age=31536000' },
     rawHeaders:
      [ 'Server',
        'nginx',
        'Date',
        'Sun, 01 Mar 2020 09:18:43 GMT',
        'Content-Type',
        'application/json',
        'Transfer-Encoding',
        'chunked',
        'Connection',
        'close',
        'Referrer-Policy',
        'same-origin',
        'X-XSS-Protection',
        '1; mode=block',
        'X-Content-Type-Options',
        'nosniff',
        'X-Frame-Options',
        'DENY',
        'Strict-Transport-Security',
        'max-age=31536000' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 400,
     statusMessage: 'Bad Request',
     client:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'btcpay135208.lndyn.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 7,
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'btcpay135208.lndyn.com',
        _readableState: [ReadableState],
        readable: false,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 1296,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 1628,
        [Symbol(kBytesWritten)]: 680,
        [Symbol(connect-options)]: [Object] },
     _consuming: true,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [TLSSocket],
        connection: [TLSSocket],
        _header:
         'POST /invoices HTTP/1.1\r\nContent-Type: application/json\r\nAccept: application/json\r\nX-Accept-Version: 2.0.0\r\nX-Identity: 02a9c547925413f26593dc0b5bf2b08b48ce1cb16d70fc50e034ad476b109f8c83\r\nX-Signature: 3046022100f983aa880a466eb59c75e6b29b70327e9db4bdf1e4fcd6b936a78f3bdae606f7022100f8c7b4260279117a43e42cf54894ae72a49641d99454701ef1196bcf9704e000\r\nhost: btcpay135208.lndyn.com\r\ncontent-length: 261\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/invoices',
        _ended: true,
        res: [Circular],
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     request:
      Request {
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        headers: [Object],
        uri: [Url],
        body:
         '{"price":"26.7082987745992662","currency":"USD","notificationEmail":null,"notificationURL":"https://eos-pay-sf2.edgesecure.co/api/v1/invoiceNotificationEvent/","extendedNotifications":true,"physical":false,"token":"7Ajvti4uAfQuJSvUN3kvD2KCktzAQy528p3QcPZXuFjc"}',
        method: 'POST',
        readable: true,
        writable: true,
        explicitMethod: true,
        _qs: [Querystring],
        _auth: [Auth],
        _oauth: [OAuth],
        _multipart: [Multipart],
        _redirect: [Redirect],
        _tunnel: [Tunnel],
        _rp_resolve: [Function],
        _rp_reject: [Function],
        _rp_promise: [Promise],
        _rp_callbackOrig: undefined,
        callback: [Function],
        _rp_options: [Object],
        setHeader: [Function],
        hasHeader: [Function],
        getHeader: [Function],
        removeHeader: [Function],
        localAddress: undefined,
        pool: {},
        dests: [],
        __isRequestRequest: true,
        _callback: [Function: RP$callback],
        proxy: null,
        tunnel: true,
        setHost: true,
        originalCookieHeader: undefined,
        _disableCookies: true,
        _jar: undefined,
        port: 443,
        host: 'btcpay135208.lndyn.com',
        path: '/invoices',
        _json: true,
        httpModule: [Object],
        agentClass: [Function: Agent],
        agent: [Agent],
        _started: true,
        href: 'https://btcpay135208.lndyn.com/invoices',
        req: [ClientRequest],
        ntick: true,
        response: [Circular],
        originalHost: 'btcpay135208.lndyn.com',
        originalHostHeaderName: 'host',
        responseContent: [Circular],
        _destdata: true,
        _ended: true,
        _callbackCalled: true },
     toJSON: [Function: responseToJSON],
     caseless: Caseless { dict: [Object] },
     body:
      { error:
         'No payment method available for this store\n3/1/20 9:18:43 AM: Creation of invoice starting\n3/1/20 9:18:43 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\n3/1/20 9:18:43 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\n3/1/20 9:18:43 AM: LTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:18:43 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:18:43 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:18:43 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:18:43 AM: BTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:18:43 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:18:43 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:18:43 AM: FTC_USD: The evaluated rating rule is ((0.0000009, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:18:43 AM: FTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:18:43 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n' } } }
currency code requested : BTC
getLatestEosActivationPriceInSelectedCryptoCurrency().cryptoPricing received 25 cryptos
stakeNetQuantity: 0.1000
stakeCpuQuantity: 6.8901
totalEos: 7.47949008
{ BTC_USD: '8577.63533693' }
{ EOS_USD: '3.57087160875' }
valuesInUSD:  [ { BTC_USD: '8577.63533693' }, { EOS_USD: '3.57087160875' } ]
eosActivationFee:  7.47949008
eosActivationFee in USD:  26.7082987745992662
calculated eosActivationFee in : BTC:  0.000416300235
Error creating invoice: { StatusCodeError: 400 - {"error":"No payment method available for this store\n3/1/20 9:28:02 AM: Creation of invoice starting\n3/1/20 9:28:03 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\n3/1/20 9:28:03 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\n3/1/20 9:28:03 AM: LTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:28:03 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:28:03 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:28:03 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:28:03 AM: BTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:28:03 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:28:03 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:28:03 AM: FTC_USD: The evaluated rating rule is ((0.0000009, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:28:03 AM: FTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:28:03 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n"}
    at new StatusCodeError (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request-promise-core/lib/errors.js:32:15)
    at Request.plumbing.callback (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request-promise-core/lib/plumbing.js:104:33)
    at Request.RP$callback [as _callback] (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request-promise-core/lib/plumbing.js:46:31)
    at Request.self.callback (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request/request.js:185:22)
    at Request.emit (events.js:188:13)
    at Request.<anonymous> (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request/request.js:1157:10)
    at Request.emit (events.js:188:13)
    at IncomingMessage.<anonymous> (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request/request.js:1079:12)
    at Object.onceWrapper (events.js:276:13)
    at IncomingMessage.emit (events.js:193:15)
    at endReadableNT (_stream_readable.js:1129:12)
    at process.internalTickCallback (internal/process/next_tick.js:72:19)
  name: 'StatusCodeError',
  statusCode: 400,
  message:
   '400 - {"error":"No payment method available for this store\\n3/1/20 9:28:02 AM: Creation of invoice starting\\n3/1/20 9:28:03 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\\n3/1/20 9:28:03 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\\n3/1/20 9:28:03 AM: LTC_USD: Rate rule error (RateUnavailable)\\n3/1/20 9:28:03 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\\n3/1/20 9:28:03 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\\n3/1/20 9:28:03 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\\n3/1/20 9:28:03 AM: BTC_USD: Rate rule error (RateUnavailable)\\n3/1/20 9:28:03 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\\n3/1/20 9:28:03 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\\n3/1/20 9:28:03 AM: FTC_USD: The evaluated rating rule is ((0.0000009, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\\n3/1/20 9:28:03 AM: FTC_USD: Rate rule error (RateUnavailable)\\n3/1/20 9:28:03 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\\n"}',
  error:
   { error:
      'No payment method available for this store\n3/1/20 9:28:02 AM: Creation of invoice starting\n3/1/20 9:28:03 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\n3/1/20 9:28:03 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\n3/1/20 9:28:03 AM: LTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:28:03 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:28:03 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:28:03 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:28:03 AM: BTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:28:03 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:28:03 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:28:03 AM: FTC_USD: The evaluated rating rule is ((0.0000009, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:28:03 AM: FTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:28:03 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n' },
  options:
   { headers:
      { 'Content-Type': 'application/json',
        Accept: 'application/json',
        'X-Accept-Version': '2.0.0',
        'X-Identity':
         '02a9c547925413f26593dc0b5bf2b08b48ce1cb16d70fc50e034ad476b109f8c83',
        'X-Signature':
         '3046022100f983aa880a466eb59c75e6b29b70327e9db4bdf1e4fcd6b936a78f3bdae606f7022100f8c7b4260279117a43e42cf54894ae72a49641d99454701ef1196bcf9704e000' },
     json: true,
     uri: 'https://btcpay135208.lndyn.com/invoices',
     body:
      { price: '26.7082987745992662',
        currency: 'USD',
        notificationEmail: null,
        notificationURL:
         'https://eos-pay-sf2.edgesecure.co/api/v1/invoiceNotificationEvent/',
        extendedNotifications: true,
        physical: false,
        token: '7Ajvti4uAfQuJSvUN3kvD2KCktzAQy528p3QcPZXuFjc' },
     method: 'POST',
     callback: [Function: RP$callback],
     transform: undefined,
     simple: true,
     resolveWithFullResponse: false,
     transform2xxOnly: false },
  response:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        close: [Array],
        data: [Function],
        error: [Function] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'btcpay135208.lndyn.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 7,
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'btcpay135208.lndyn.com',
        _readableState: [ReadableState],
        readable: false,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 1365,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 1628,
        [Symbol(kBytesWritten)]: 680,
        [Symbol(connect-options)]: [Object] },
     connection:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'btcpay135208.lndyn.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 7,
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'btcpay135208.lndyn.com',
        _readableState: [ReadableState],
        readable: false,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 1365,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 1628,
        [Symbol(kBytesWritten)]: 680,
        [Symbol(connect-options)]: [Object] },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { server: 'nginx',
        date: 'Sun, 01 Mar 2020 09:28:03 GMT',
        'content-type': 'application/json',
        'transfer-encoding': 'chunked',
        connection: 'close',
        'referrer-policy': 'same-origin',
        'x-xss-protection': '1; mode=block',
        'x-content-type-options': 'nosniff',
        'x-frame-options': 'DENY',
        'strict-transport-security': 'max-age=31536000' },
     rawHeaders:
      [ 'Server',
        'nginx',
        'Date',
        'Sun, 01 Mar 2020 09:28:03 GMT',
        'Content-Type',
        'application/json',
        'Transfer-Encoding',
        'chunked',
        'Connection',
        'close',
        'Referrer-Policy',
        'same-origin',
        'X-XSS-Protection',
        '1; mode=block',
        'X-Content-Type-Options',
        'nosniff',
        'X-Frame-Options',
        'DENY',
        'Strict-Transport-Security',
        'max-age=31536000' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 400,
     statusMessage: 'Bad Request',
     client:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'btcpay135208.lndyn.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 7,
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'btcpay135208.lndyn.com',
        _readableState: [ReadableState],
        readable: false,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 1365,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 1628,
        [Symbol(kBytesWritten)]: 680,
        [Symbol(connect-options)]: [Object] },
     _consuming: true,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [TLSSocket],
        connection: [TLSSocket],
        _header:
         'POST /invoices HTTP/1.1\r\nContent-Type: application/json\r\nAccept: application/json\r\nX-Accept-Version: 2.0.0\r\nX-Identity: 02a9c547925413f26593dc0b5bf2b08b48ce1cb16d70fc50e034ad476b109f8c83\r\nX-Signature: 3046022100f983aa880a466eb59c75e6b29b70327e9db4bdf1e4fcd6b936a78f3bdae606f7022100f8c7b4260279117a43e42cf54894ae72a49641d99454701ef1196bcf9704e000\r\nhost: btcpay135208.lndyn.com\r\ncontent-length: 261\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/invoices',
        _ended: true,
        res: [Circular],
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     request:
      Request {
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        headers: [Object],
        uri: [Url],
        body:
         '{"price":"26.7082987745992662","currency":"USD","notificationEmail":null,"notificationURL":"https://eos-pay-sf2.edgesecure.co/api/v1/invoiceNotificationEvent/","extendedNotifications":true,"physical":false,"token":"7Ajvti4uAfQuJSvUN3kvD2KCktzAQy528p3QcPZXuFjc"}',
        method: 'POST',
        readable: true,
        writable: true,
        explicitMethod: true,
        _qs: [Querystring],
        _auth: [Auth],
        _oauth: [OAuth],
        _multipart: [Multipart],
        _redirect: [Redirect],
        _tunnel: [Tunnel],
        _rp_resolve: [Function],
        _rp_reject: [Function],
        _rp_promise: [Promise],
        _rp_callbackOrig: undefined,
        callback: [Function],
        _rp_options: [Object],
        setHeader: [Function],
        hasHeader: [Function],
        getHeader: [Function],
        removeHeader: [Function],
        localAddress: undefined,
        pool: {},
        dests: [],
        __isRequestRequest: true,
        _callback: [Function: RP$callback],
        proxy: null,
        tunnel: true,
        setHost: true,
        originalCookieHeader: undefined,
        _disableCookies: true,
        _jar: undefined,
        port: 443,
        host: 'btcpay135208.lndyn.com',
        path: '/invoices',
        _json: true,
        httpModule: [Object],
        agentClass: [Function: Agent],
        agent: [Agent],
        _started: true,
        href: 'https://btcpay135208.lndyn.com/invoices',
        req: [ClientRequest],
        ntick: true,
        response: [Circular],
        originalHost: 'btcpay135208.lndyn.com',
        originalHostHeaderName: 'host',
        responseContent: [Circular],
        _destdata: true,
        _ended: true,
        _callbackCalled: true },
     toJSON: [Function: responseToJSON],
     caseless: Caseless { dict: [Object] },
     body:
      { error:
         'No payment method available for this store\n3/1/20 9:28:02 AM: Creation of invoice starting\n3/1/20 9:28:03 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\n3/1/20 9:28:03 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\n3/1/20 9:28:03 AM: LTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:28:03 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:28:03 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:28:03 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:28:03 AM: BTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:28:03 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:28:03 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:28:03 AM: FTC_USD: The evaluated rating rule is ((0.0000009, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:28:03 AM: FTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:28:03 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n' } } }
currency code requested : BTC
getLatestEosActivationPriceInSelectedCryptoCurrency().cryptoPricing received 25 cryptos
stakeNetQuantity: 0.1000
stakeCpuQuantity: 6.8901
totalEos: 7.47949008
{ BTC_USD: '8577.63533693' }
{ EOS_USD: '3.57087160875' }
valuesInUSD:  [ { BTC_USD: '8577.63533693' }, { EOS_USD: '3.57087160875' } ]
eosActivationFee:  7.47949008
eosActivationFee in USD:  26.7082987745992662
calculated eosActivationFee in : BTC:  0.000416300235
Error creating invoice: { StatusCodeError: 400 - {"error":"No payment method available for this store\n3/1/20 9:29:25 AM: Creation of invoice starting\n3/1/20 9:29:25 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\n3/1/20 9:29:25 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\n3/1/20 9:29:25 AM: LTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:29:25 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:29:25 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:29:25 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:29:25 AM: BTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:29:25 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:29:25 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:29:25 AM: FTC_USD: The evaluated rating rule is ((0.0000009, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:29:25 AM: FTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:29:25 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n"}
    at new StatusCodeError (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request-promise-core/lib/errors.js:32:15)
    at Request.plumbing.callback (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request-promise-core/lib/plumbing.js:104:33)
    at Request.RP$callback [as _callback] (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request-promise-core/lib/plumbing.js:46:31)
    at Request.self.callback (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request/request.js:185:22)
    at Request.emit (events.js:188:13)
    at Request.<anonymous> (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request/request.js:1157:10)
    at Request.emit (events.js:188:13)
    at IncomingMessage.<anonymous> (/opt/eos-name-api/edge-eos-name-payment-api/node_modules/request/request.js:1079:12)
    at Object.onceWrapper (events.js:276:13)
    at IncomingMessage.emit (events.js:193:15)
    at endReadableNT (_stream_readable.js:1129:12)
    at process.internalTickCallback (internal/process/next_tick.js:72:19)
  name: 'StatusCodeError',
  statusCode: 400,
  message:
   '400 - {"error":"No payment method available for this store\\n3/1/20 9:29:25 AM: Creation of invoice starting\\n3/1/20 9:29:25 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\\n3/1/20 9:29:25 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\\n3/1/20 9:29:25 AM: LTC_USD: Rate rule error (RateUnavailable)\\n3/1/20 9:29:25 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\\n3/1/20 9:29:25 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\\n3/1/20 9:29:25 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\\n3/1/20 9:29:25 AM: BTC_USD: Rate rule error (RateUnavailable)\\n3/1/20 9:29:25 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\\n3/1/20 9:29:25 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\\n3/1/20 9:29:25 AM: FTC_USD: The evaluated rating rule is ((0.0000009, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\\n3/1/20 9:29:25 AM: FTC_USD: Rate rule error (RateUnavailable)\\n3/1/20 9:29:25 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\\n"}',
  error:
   { error:
      'No payment method available for this store\n3/1/20 9:29:25 AM: Creation of invoice starting\n3/1/20 9:29:25 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\n3/1/20 9:29:25 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\n3/1/20 9:29:25 AM: LTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:29:25 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:29:25 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:29:25 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:29:25 AM: BTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:29:25 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:29:25 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:29:25 AM: FTC_USD: The evaluated rating rule is ((0.0000009, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:29:25 AM: FTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:29:25 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n' },
  options:
   { headers:
      { 'Content-Type': 'application/json',
        Accept: 'application/json',
        'X-Accept-Version': '2.0.0',
        'X-Identity':
         '02a9c547925413f26593dc0b5bf2b08b48ce1cb16d70fc50e034ad476b109f8c83',
        'X-Signature':
         '3046022100f983aa880a466eb59c75e6b29b70327e9db4bdf1e4fcd6b936a78f3bdae606f7022100f8c7b4260279117a43e42cf54894ae72a49641d99454701ef1196bcf9704e000' },
     json: true,
     uri: 'https://btcpay135208.lndyn.com/invoices',
     body:
      { price: '26.7082987745992662',
        currency: 'USD',
        notificationEmail: null,
        notificationURL:
         'https://eos-pay-sf2.edgesecure.co/api/v1/invoiceNotificationEvent/',
        extendedNotifications: true,
        physical: false,
        token: '7Ajvti4uAfQuJSvUN3kvD2KCktzAQy528p3QcPZXuFjc' },
     method: 'POST',
     callback: [Function: RP$callback],
     transform: undefined,
     simple: true,
     resolveWithFullResponse: false,
     transform2xxOnly: false },
  response:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        close: [Array],
        data: [Function],
        error: [Function] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'btcpay135208.lndyn.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 7,
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'btcpay135208.lndyn.com',
        _readableState: [ReadableState],
        readable: false,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 1422,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 1635,
        [Symbol(kBytesWritten)]: 680,
        [Symbol(connect-options)]: [Object] },
     connection:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'btcpay135208.lndyn.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 7,
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'btcpay135208.lndyn.com',
        _readableState: [ReadableState],
        readable: false,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 1422,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 1635,
        [Symbol(kBytesWritten)]: 680,
        [Symbol(connect-options)]: [Object] },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { server: 'nginx',
        date: 'Sun, 01 Mar 2020 09:29:25 GMT',
        'content-type': 'application/json',
        'transfer-encoding': 'chunked',
        connection: 'close',
        'referrer-policy': 'same-origin',
        'x-xss-protection': '1; mode=block',
        'x-content-type-options': 'nosniff',
        'x-frame-options': 'DENY',
        'strict-transport-security': 'max-age=31536000' },
     rawHeaders:
      [ 'Server',
        'nginx',
        'Date',
        'Sun, 01 Mar 2020 09:29:25 GMT',
        'Content-Type',
        'application/json',
        'Transfer-Encoding',
        'chunked',
        'Connection',
        'close',
        'Referrer-Policy',
        'same-origin',
        'X-XSS-Protection',
        '1; mode=block',
        'X-Content-Type-Options',
        'nosniff',
        'X-Frame-Options',
        'DENY',
        'Strict-Transport-Security',
        'max-age=31536000' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 400,
     statusMessage: 'Bad Request',
     client:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'btcpay135208.lndyn.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 7,
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'btcpay135208.lndyn.com',
        _readableState: [ReadableState],
        readable: false,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [ClientRequest],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 1422,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 1635,
        [Symbol(kBytesWritten)]: 680,
        [Symbol(connect-options)]: [Object] },
     _consuming: true,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [TLSSocket],
        connection: [TLSSocket],
        _header:
         'POST /invoices HTTP/1.1\r\nContent-Type: application/json\r\nAccept: application/json\r\nX-Accept-Version: 2.0.0\r\nX-Identity: 02a9c547925413f26593dc0b5bf2b08b48ce1cb16d70fc50e034ad476b109f8c83\r\nX-Signature: 3046022100f983aa880a466eb59c75e6b29b70327e9db4bdf1e4fcd6b936a78f3bdae606f7022100f8c7b4260279117a43e42cf54894ae72a49641d99454701ef1196bcf9704e000\r\nhost: btcpay135208.lndyn.com\r\ncontent-length: 261\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/invoices',
        _ended: true,
        res: [Circular],
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     request:
      Request {
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        headers: [Object],
        uri: [Url],
        body:
         '{"price":"26.7082987745992662","currency":"USD","notificationEmail":null,"notificationURL":"https://eos-pay-sf2.edgesecure.co/api/v1/invoiceNotificationEvent/","extendedNotifications":true,"physical":false,"token":"7Ajvti4uAfQuJSvUN3kvD2KCktzAQy528p3QcPZXuFjc"}',
        method: 'POST',
        readable: true,
        writable: true,
        explicitMethod: true,
        _qs: [Querystring],
        _auth: [Auth],
        _oauth: [OAuth],
        _multipart: [Multipart],
        _redirect: [Redirect],
        _tunnel: [Tunnel],
        _rp_resolve: [Function],
        _rp_reject: [Function],
        _rp_promise: [Promise],
        _rp_callbackOrig: undefined,
        callback: [Function],
        _rp_options: [Object],
        setHeader: [Function],
        hasHeader: [Function],
        getHeader: [Function],
        removeHeader: [Function],
        localAddress: undefined,
        pool: {},
        dests: [],
        __isRequestRequest: true,
        _callback: [Function: RP$callback],
        proxy: null,
        tunnel: true,
        setHost: true,
        originalCookieHeader: undefined,
        _disableCookies: true,
        _jar: undefined,
        port: 443,
        host: 'btcpay135208.lndyn.com',
        path: '/invoices',
        _json: true,
        httpModule: [Object],
        agentClass: [Function: Agent],
        agent: [Agent],
        _started: true,
        href: 'https://btcpay135208.lndyn.com/invoices',
        req: [ClientRequest],
        ntick: true,
        response: [Circular],
        originalHost: 'btcpay135208.lndyn.com',
        originalHostHeaderName: 'host',
        responseContent: [Circular],
        _destdata: true,
        _ended: true,
        _callbackCalled: true },
     toJSON: [Function: responseToJSON],
     caseless: Caseless { dict: [Object] },
     body:
      { error:
         'No payment method available for this store\n3/1/20 9:29:25 AM: Creation of invoice starting\n3/1/20 9:29:25 AM: LTC_USD: The rating rule is (bitstamp(LTC_USD)) * (0.75, 1.25)\n3/1/20 9:29:25 AM: LTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, LTC_USD)) * (0.75, 1.25)\n3/1/20 9:29:25 AM: LTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:29:25 AM: LTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:29:25 AM: BTC_USD: The rating rule is (bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:29:25 AM: BTC_USD: The evaluated rating rule is (ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:29:25 AM: BTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:29:25 AM: BTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n3/1/20 9:29:25 AM: FTC_USD: The rating rule is (bittrex(FTC_BTC) * bitstamp(BTC_USD)) * (0.75, 1.25)\n3/1/20 9:29:25 AM: FTC_USD: The evaluated rating rule is ((0.0000009, 0.00000093) * ERR_RATE_UNAVAILABLE(bitstamp, BTC_USD)) * (0.75, 1.25)\n3/1/20 9:29:25 AM: FTC_USD: Rate rule error (RateUnavailable)\n3/1/20 9:29:25 AM: FTC_USD: Exception reaching exchange bitstamp (Unauthorized access to the API, premium plan needed)\n' } } }
